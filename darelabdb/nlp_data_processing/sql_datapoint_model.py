from typing import Dict, List, Optional, Union

import pandas as pd
from pydantic import BaseModel, ConfigDict, Field


class SqlQueryDatapoint(BaseModel):
    """
    The common representation of a Text2SQL / SQL2Text datapoint.
    New **optional** fields can be added freely but deleting/renaming existing fields
    will result to compatibility issues.

    **Example**
    ```python
    datapoint = SqlQueryDatapoint(
                nl-query="List all singers",
                sql_query="select * from singer",
                db_id: "singer",
                db_path: "databases/singer.sqlite"
            )
    ```

    **Arguments**

    * `nl_query (str)`: A natural language question.
    * `sql_query (str)`: A SQL query.
    * `db_id (str)`: The id of the database upon which the question is made.
    * `db_path (str)`: The path to the database.
    * `db_schema (Dict[str, Union[str, List]])`: The schema of the database.
        The dictionary must contain the following fields:

        - `table_names (list[<table_name>])`: The tables of the database.
        - `column_names (list[tuple[<table_idx>, <column_name>]])`: The columns of the schema.
        - `foreign_keys (list[tuple[<foreign_key_column_idx>, <foreign_key_column_idx>]])`: The list with the
            foreign primary key relations in the database.
    """

    model_config = ConfigDict(arbitrary_types_allowed=True, extra="allow")
    model_config["protected_namespaces"] = ()

    nl_query: str
    sql_query: str
    db_id: str
    db_path: str
    db_schema: List[Dict] = Field(default=None)

    # The pre-processed input as it is given to the model
    model_input: Optional[Union[str, List]] = None
    # The raw output generated by the model, before any processing
    model_output: Optional[str] = None
    # The raw output that the model should generate, maybe used to calculate loss
    expected_output: Optional[str] = None
    # Result of post-processing on the model's raw output
    prediction: Optional[str] = None
    # Used to calculate metrics
    ground_truth: Optional[str] = None
